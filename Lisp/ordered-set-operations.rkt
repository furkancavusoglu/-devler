#lang racket

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((> (car set) x) false)
        ((= (car set) x) true)
        (else (element-of-set? x (cdr set)))))
(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2) (cons x1 (intersection-set (cdr set1) (cdr set2))))
              ((< x1 x2) (intersection-set (cdr set1) set2))
              ((> x1 x2) (intersection-set set1 (cdr set2)))))))
(define (adjoin-set x set)
  (cond ((or (null? set) (> x (car set))) (cons x set))
        ((= x (car set)) set)
        ((< x (car set))(cons (car set) (adjoin-set x (cdr set))))))

(define (union-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2) (cons x1 (union-set (cdr set1) set2)))
              ((< x1 x2) (cons x1 (union-set (cdr set1) set2)))
              ((> x1 x2) (cons x2 (union-set set1 (cdr set2))))))))

(define s1 (list 1 2 3 4 5 6 7 8 9 10))
(define s2 (list 1 3 5 7 9 11 13 15 17 19))

(union-set s1 s2)