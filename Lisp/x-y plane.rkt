#lang racket

(define (make-point x y) (cons x y))
(define (x-point point)  (car point))
(define (y-point point)  (cdr point))
(define (make-segment point-a point-b) (cons point-a point-b))
(define (start-segment segment)  (car segment))
(define (end-segment segment)    (cdr segment))
(define (midpoint-segment segment)
  (let ((a (start-segment segment)) 
         (b (end-segment segment))) 
     (make-point (/ (+ (x-point a) 
                       (x-point b))
                    2) 
                 (/ (+ (y-point a) 
                       (y-point b))
                    2)))) 
(define (print-point p)
(newline)
(display "(")
(display (x-point p))
(display ",")
(display (y-point p))
(display ")"))

(define seg (make-segment (make-point 2 3) 
                           (make-point 10 15))) 
  
(print-point (midpoint-segment seg))